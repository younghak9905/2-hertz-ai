name: AI Docker CI/CD

on:
  pull_request:
    types: [closed]
    branches:
      - develop
      - main
    paths:
      - 'app-chat-report/**'
      - 'docker-compos-chat-report.yml'
      - 'Dockerfile.chat-report'
      - 'Dockerfile.base-chat-report'
      - '.github/workflows/docker-deploy-chat-report.yml'
  workflow_dispatch:
    inputs:
      env:
        description: "배포 환경 선택"
        required: true
        default: "develop"
        type: choice
        options:
          - develop
          - main

env:
  BASE_IMAGE_NAME: base
  PROD_IMAGE_NAME: tuning-chat-report

jobs:
  # CI 작업: 테스트 및 이미지 빌드
  ci:
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 2. AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4. 태그 정보 생성
      - name: Generate tags
        id: generate-tags
        run: |

          if [ workflow_dispatch = "true" ]; then
            BRANCH="${{ github.event.inputs.env }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi

          SANITIZED_BRANCH="${BRANCH//\//-}"
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
          BRANCH="$SANITIZED_BRANCH"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE_TAG="${BRANCH}-${SHORT_SHA}"

          if [ "$BRANCH" = "main" ]; then
            ENV_TAG="main-latest"
          else
            ENV_TAG="develop-latest"
          fi

          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPOSITORY=tuning-chat-report
          FULL_IMAGE="$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "env_tag=$ENV_TAG" >> $GITHUB_OUTPUT
          echo "full_image=$FULL_IMAGE" >> $GITHUB_OUTPUT
          echo "ecr_registry=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT

      # 5. Docker 이미지 빌드 및 푸시 (빌드 캐시 활용)
      - name: Build and push Docker image with cache
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: tuning-chat-report
          IMAGE_TAG: ${{ steps.generate-tags.outputs.image_tag }}
          ENV_TAG: ${{ steps.generate-tags.outputs.env_tag }}
        run: |
          echo "🏗️ Docker 이미지 빌드 시작 (with cache)..."
          docker build \
            --cache-from=type=registry,ref=$ECR_REGISTRY/$REPOSITORY:$ENV_TAG \
            --cache-to=type=inline \
            -f Dockerfile.base-chat-report \
            -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG \
            .
          docker tag $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$REPOSITORY:$ENV_TAG
          echo "📤 Docker 이미지 푸시 중..."
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$REPOSITORY:$ENV_TAG

      # 6. 성공/실패 알림
      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"username\": \"Chat-Report CI\", \"content\": \"✅ [신고 API CI 성공] **${{ steps.generate-tags.outputs.branch }}** 브랜치\\n🔖 태그: ${{ steps.generate-tags.outputs.image_tag }}\\n🆔 Commit: ${{ steps.generate-tags.outputs.short_sha }}\\n📦 이미지: ${{ steps.generate-tags.outputs.full_image }}\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

    #   - name: Send failure notification
    #     if: failure()
    #     run: |
    #       curl -H "Content-Type: application/json" \
    #         -X POST \
    #         -d "{\"username\": \"Chat-Report\", \"content\": \"❌ [신고 API CI 실패] **${{ github.base_ref }}** 브랜치\\n🔖 Commit: ${{ github.sha }}\\n⚠️ 원인: 빌드 또는 테스트 실패\"}" \
    #         ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

    outputs:
      branch: ${{ steps.generate-tags.outputs.branch }}
      image_tag: ${{ steps.generate-tags.outputs.image_tag }}
      env_tag: ${{ steps.generate-tags.outputs.env_tag }}
      full_image: ${{ steps.generate-tags.outputs.full_image }}
      short_sha: ${{ steps.generate-tags.outputs.short_sha }}
      ecr_registry: ${{ steps.generate-tags.outputs.ecr_registry }}
      repository: ${{ steps.generate-tags.outputs.repository }}

  # CD 작업: 배포
  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      # 1. AWS 인증 (ECR 및 SSM 접근)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr-cd
        uses: aws-actions/amazon-ecr-login@v1

      # 3. CI output 변수 환경에 반영
      - name: Set CI output variables
        run: |
          CI_FULL_IMAGE="${{ needs.ci.outputs.full_image }}"
          CI_IMAGE_TAG="${{ needs.ci.outputs.image_tag }}"
          ECR_REGISTRY=${{ steps.login-ecr-cd.outputs.registry }}
          FULL_IMAGE="$ECR_REGISTRY/tuning-chat-report:$CI_IMAGE_TAG"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_ENV
          echo "IMAGE_TAG=$CI_IMAGE_TAG" >> $GITHUB_ENV

      # 4. SSM에서 환경 변수/시크릿 불러오기
      - name: Set environment variables from SSM
        id: ssm
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }
          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)
            echo "$VALUE" | while IFS= read -r line; do echo "::add-mask::$line"; done
            echo "$VALUE" > "$2"
          }

          if [ workflow_dispatch = "true" ]; then
            BRANCH="${{ github.event.inputs.env }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            load_param "/global/gcp/prod/GCP_HOST_AI" HOST
            load_param "/global/gcp/prod/GCP_INSTANCE_AI" INSTANCE
            load_param "/global/gcp/prod/GCP_PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/prod/GCP_ZONE" ZONE
            load_secret_to_file "/global/gcp/prod/GCP_SA_KEY" gcp-sa-key.json
            load_param "/global/gcp/prod/MONGODB_CONNECTION_STRING" MONGODB_CONNECTION_STRING
          else
            echo "ENV=develop" >> $GITHUB_ENV
            load_param "/global/gcp/dev/GCP_HOST_AI" HOST
            load_param "/global/gcp/dev/GCP_INSTANCE_AI" INSTANCE
            load_param "/global/gcp/dev/GCP_PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/dev/GCP_ZONE" ZONE
            load_secret_to_file "/global/gcp/dev/GCP_SA_KEY" gcp-sa-key.json
            load_param "/global/gcp/dev/MONGODB_CONNECTION_STRING" MONGODB_CONNECTION_STRING
          fi
          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          load_param "/global/gcp/SSH_USERNAME" SSH_USERNAME
          load_secret_to_file "/global/gcp/SSH_PRIVATE_KEY" id_rsa
          chmod 600 id_rsa
          echo "SSH_KEY_PATH=id_rsa" >> $GITHUB_ENV

      # 5. GCP 인증 (옵션: 필요시 환경 분리)
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      # 6. GCP 인스턴스 부팅 (중지 상태 → 시작/Resume)
      - name: Boot target instance (start/resume with conditional wait)
        run: |
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "🔎 현재 상태: $STATUS"
          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "🔄 'resume' 명령 실행"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "🔄 'start' 명령 실행"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
            sleep 30
          else
            echo "✅ 이미 실행 중"
          fi
      # 1. 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      

      - name: Copy docker-compose-chat-report.yml to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose-chat-report.yml"  # 🔹 루트 기준 상대경로
          target: "/home/deploy"

      # 7. 실제 배포 + 헬스체크 + 롤백 (Prod만)
      - name: Deploy to GCP & Health check (with rollback)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: ENV,FULL_IMAGE,IMAGE_TAG,AWS_REGION,ECR_REGISTRY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,MONGODB_CONNECTION_STRING
          script: |

            # 필수 도구 (aws-cli, python3-pip) 설치 확인 및 설치
            if ! command -v aws &> /dev/null || ! command -v pip3 &> /dev/null; then
              echo "⏳ 필수 도구가 없습니다. 설치를 시도합니다... (sudo 권한 필요)"
              sudo apt-get update -y
              sudo apt-get install -y awscli python3-pip
            fi
            echo "=== 환경변수 확인 ==="
            echo "ENV: $ENV"
            echo "IMAGE_TAG: $IMAGE_TAG"
            echo "FULL_IMAGE: $FULL_IMAGE"
            echo "AWS_REGION: $AWS_REGION"
            echo "ECR_REGISTRY: $ECR_REGISTRY"
            echo "========================"
            cd /home/deploy

            # AWS CLI 설정 (임시 인증)
            mkdir -p ~/.aws
            cat > ~/.aws/credentials << EOF
            [default]
            aws_access_key_id=${AWS_ACCESS_KEY_ID}
            aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
            EOF
            cat > ~/.aws/config << EOF
            [default]
            region=${AWS_REGION}
            output=json
            EOF

            # 볼륨에 sentence-transformers 패키지 자동 설치 (없을 때만)
            PYLIBS_DIR="/home/deploy/app-pylibs"
            if [ ! -d "$PYLIBS_DIR/transformers" ] || [ ! -d "$PYLIBS_DIR/accelerate" ]; then
              echo "📦 sentence-transformers 패키지가 없으므로 설치합니다..."
              mkdir -p "$PYLIBS_DIR"
              python3 -m pip install --upgrade pip
              python3 -m pip install --target="$PYLIBS_DIR" sentence-transformers==4.1.0
              python3 -m pip install --target="$PYLIBS_DIR" accelerate==0.30.1

            else
              echo "✅ sentence-transformers 패키지가 이미 존재합니다."
            fi

            # ECR 로그인
            echo "🔐 ECR 로그인 시도"
            if aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY; then
              echo "✅ ECR 로그인 성공"
            else
              echo "❌ ECR 로그인 실패"
              exit 1
            fi
            

            # .env 파일에 이미지 정보 세팅
            echo "# 이미지 설정" > .env
            echo "FULL_IMAGE=${FULL_IMAGE}" >> .env
            echo "MONGODB_CONNECTION_STRING=${MONGODB_CONNECTION_STRING}" >> .env

            # 기존 컨테이너 중지/삭제 후 최신 이미지로 실행


            if [ ! -d "/home/deploy/models/jinkyeongk-kcELECTRA-toxic-detector" ]; then
              echo "모델 디렉토리가 없습니다. 모델을 먼저 다운로드합니다."
              docker compose -f docker-compose-chat-report.yml run --rm chat-report python scripts/download_model.py
            else
              echo "모델 디렉토리가 이미 존재합니다. 다운로드를 건너뜁니다."
            fi            
            docker compose -f docker-compose-chat-report.yml stop chat-report
            docker compose -f docker-compose-chat-report.yml rm -f chat-report
            docker compose -f docker-compose-chat-report.yml --env-file .env up -d chat-report


            echo "🕒 FastAPI 서버 기동 대기 중..."
            sleep 15

            # ================== Health Check + 태그 기록 + 롤백 (Prod만) ==================
             # 최초 롤백 대비: 파일이 없으면 빈 파일 생성(최초 배포, 또는 수동 복구 대비)
            [ -f last-successful-tag.txt ] || touch last-successful-tag.txt
            echo "🔍 API 서비스 헬스체크 중..."
            for i in {1..5}; do
             if curl -sf http://localhost:8000/docs; then
                echo "✅ API 서비스가 정상적으로 시작되었습니다."
                echo "$IMAGE_TAG" > last-successful-tag.txt
                exit 0
              fi
              echo "⏱️ API 서비스 준비 대기 중... ($i/5)"
              sleep 10
            done

            if [ "$ENV" = "production" ] || [ "$ENV" = "prod" ]; then
              echo "🟠 [PRODUCTION] 환경이므로 헬스체크 실패 시 롤백 수행!"
              PREV_IMAGE_TAG=$(cat last-successful-tag.txt)
              PREV_IMAGE="${ECR_REGISTRY}/tuning-chat-report:${PREV_IMAGE_TAG}"
              if grep -q '^FULL_IMAGE=' .env; then
                sed -i "s|^FULL_IMAGE=.*|FULL_IMAGE=${PREV_IMAGE}|" .env
              else
                echo "FULL_IMAGE=${PREV_IMAGE}" >> .env
              fi
              
              docker compose -f docker-compose-chat-report.yml stop chat-report
              docker compose -f docker-compose-chat-report.yml rm -f chat-report
              docker compose -f docker-compose-chat-report.yml --env-file .env up -d chat-report

              echo "✅ 롤백 완료! (이전 이미지로 복구됨)"
            else
              echo "🟢 [DEVELOP/테스트] 환경이므로 롤백하지 않습니다."
            fi

            echo "📝 최근 로그 확인:"
            docker compose -f docker-compose-chat-report.yml logs --tail=10 chat-report

            #실패
            exit 1

    #   # 8. 성공/실패 알림
    #   - name: Send success notification
    #     if: success()
    #     run: |
    #       curl -H "Content-Type: application/json" \
    #         -X POST \
    #         -d "{\"content\": \"✅ [신고 API CD 성공] **${{ env.ENV }}** 환경 배포 완료\\n🔖 이미지: ${{ env.FULL_IMAGE }}\\n⚙️ \"}" \
    #         ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

    #   - name: Send failure notification
    #     if: failure()
    #     run: |
    #       WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    #       curl -H "Content-Type: application/json" \
    #         -X POST \
    #         -d "{\"content\": \"❌ [신고 API CD 실패] **${{ env.ENV }}** 환경 배포 실패\\n🔖 이미지: ${{ env.FULL_IMAGE }}\\n⚠️ 원인: API 배포 과정 중 오류 발생\\n🔗 [워크플로우 로그]($WORKFLOW_URL)\"}" \
    #         ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}